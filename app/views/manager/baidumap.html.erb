<script>
Ext.Ajax.defaultHeaders = { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') };
Ext.apply(Ext.form.VTypes,{  
    // function for validation  
    ip: function(ipValue){  
        // just a simple   
        var ipRegex = /^(\d{1,3})(\.\d{1,3}){3}$/i;  
        return ipRegex.test(ipValue);  
    },  
    // default error text  
    ipText: "Not a valid IP, Correct Format is 12.23.2.1",  
    // filter keys, can only type digit and dot  
    ipMask: /[\d\.]/i  
});
// fix form submit mask auto destroy bug
Ext.define('Ext.form.SubmitFix', {
    override: 'Ext.ZIndexManager',
 
    register : function(comp) {
        var me = this,
            compAfterHide = comp.afterHide;
      
        if (comp.zIndexManager) {
            comp.zIndexManager.unregister(comp);
        }
        comp.zIndexManager = me;
 
        me.list[comp.id] = comp;
        me.zIndexStack.push(comp);
      
        // Hook into Component's afterHide processing
        comp.afterHide = function() {
            compAfterHide.apply(comp, arguments);
            me.onComponentHide(comp);
        };
    },
 
    /**
    * Unregisters a {@link Ext.Component} from this ZIndexManager. This should not
    * need to be called. Components are automatically unregistered upon destruction.
    * See {@link #register}.
    * @param {Ext.Component} comp The Component to unregister.
    */
    unregister : function(comp) {
        var me = this,
            list = me.list;
      
        delete comp.zIndexManager;
        if (list && list[comp.id]) {
            delete list[comp.id];
          
            // Relinquish control of Component's afterHide processing
            delete comp.afterHide;
            Ext.Array.remove(me.zIndexStack, comp);
 
            // Destruction requires that the topmost visible floater be activated. Same as hiding.
            me._activateLast();
        }
    }
});
Ext.onReady(function () {
	Ext.getCmp('left').items.items[2].expand();
	var markersArray = [];
	Ext.regModel('StatusInfo', {
	    fields: [{name: 'basestationstatus'},{name: 'value'}]
	});
	var BasestationStore = Ext.create('Ext.data.Store',{
		model : 'StatusInfo',
		data : [
			{basestationstatus:'<%= t(:working) %>',value:'100000'},
			{basestationstatus:'<%= t(:breaking) %>',value:'101100'},
		]
	});
	var baidumap=Ext.create('Ext.panel.Panel', {
    title: '',
    layout: 'border',
    items: [
	 {
        xtype: 'panel',
        region: 'east',
		id: 'east-panel',
        title: '<%= t('basestation info') %>',
        animCollapse: true,
        collapsible: true,
        split: true,
        width: 225,  
        minSize: 175,
        maxSize: 400,
        margins: '0 5 0 0',
        items: [ 
			Ext.create('Ext.form.Panel', { 
	            id: 'zone-form',  
	            title: '', 
	            bodyStyle:'padding-top: 25px; padding-left: 10px;padding-right: 20px;',  
	            defaults: {  
	                width: 240,  
	               	labelWidth: 75, 
	                anchor: '98%',  
	                allowBlank: false,  
	                selectOnFocus: true,  
	                msgTarget: 'side'  
	            },  
	            defaultType: 'textfield',  
	            method: 'POST',  
	            border: false, 
				buttonAlign: 'center',
	            buttons: [{  
					text:'<%= t('save') %>',
					id: 'btnOK',
					handler: function(){
						if(Ext.getCmp('zone-form').getForm().isValid()){
							Ext.getCmp('zone-form').getForm().submit({     
								waitTitle : '<%= t(:tip) %>', 
								waitMsg : '<%= t(:waiting) %>',   
								url : 'basestation_edit', 
								success : function(form, action){
									while(markersArray.length){
										map.removeOverlay(markersArray.pop());
									} 
									markersArray=[];
									var marker;
									var baseurl='http://'+document.URL.split('/')[2]+'/assets/';
									var base=action.result.griddata;
									var workingicon = new BMap.Icon( baseurl+'working.png', new BMap.Size(128, 128), { 
				    					anchor: new BMap.Size(10, 30) 
									}); 
									var breakingicon = new BMap.Icon( baseurl+'breaking.png', new BMap.Size(128, 128), { 
								    	anchor: new BMap.Size(10, 30) 
									}); 
									
									for(i=0; i<action.result.griddata.length; i++)
									{
										if(base[i].status)
										{
											 marker = new BMap.Marker(new BMap.Point(base[i].longitude,  base[i].latitude),{
												icon: workingicon
											});
										}
										else
										{
											 marker = new BMap.Marker(new BMap.Point(base[i].longitude,  base[i].latitude),{
												icon: breakingicon
											});
		
										}
										map.addOverlay(marker);  	
										marker.addEventListener("click", function(e){  
											east.expand();			
											Ext.getCmp('zoneid').setValue(base[i].id);	
											Ext.getCmp('code').setValue(base[i].code);	
											Ext.getCmp('ip').setValue(base[i].ip);	
											Ext.getCmp('txtZoneName').setValue(base[i].name);
											Ext.getCmp('place').setValue(base[i].place);	
										 	Ext.getCmp('status').setValue(base[i].status);			
											Ext.getCmp('txtPosX').setValue(base[i].latitude);
											Ext.getCmp('txtPosY').setValue(base[i].longitude);
										})
										 markersArray.push(marker);
									}
								},   
								failure : function(form,action) {    
									Ext.Msg.alert('title', "false");   
								}   
							});   
						}
						
					}
				},{  
					text: '<%= t('reset') %>',  
					handler: function(){  
						Ext.getCmp('zone-form').form.reset();  
					}  
				}],  
	            items: [ 
					{  
	                    id: 'zoneid',  
	                    name: 'id', 
						allowBlank: false,
						hidden: true,
	                },	
					{xtype:"textfield",fieldLabel: '<%= t('code') %>',name: "code", id: 'code'},   
					{  
	                    id: 'txtZoneName',  
	                    name: 'name', 
						allowBlank: false,
	                    fieldLabel: '<%= t('zone name') %>', 
	                    minLength:1, 
	                    maxLength:30,
	                    emptyText: '<%= t('input zone name') %>',
	                    blankText: '<%= t('input zone name') %>'  
	                },
					{xtype:"textfield",fieldLabel: 'IP',name: "ip", vtype: "ip", vtypeText:'<%= t('ip format error') %>', id: 'ip'},
					{xtype:"textfield",fieldLabel: '<%= t('place') %>',name: "place", id: 'place'}, 
					{
	                	id: 'txtPosY',
	                	name: 'longitude',
						xtype : "numberfield",
						fieldLabel: '<%= t('longitude') %>', 
						value: 0.0,
		                allowBlank: true,
		                allowNegative: true,
		                allowDecimals: true,
		                decimalPrecision: 3 
		            },{
	                	id: 'txtPosX',
	                	name: 'latitude',
						xtype : "numberfield",
						fieldLabel: '<%= t('latitude') %>', 
						value: 0.0,
		                allowBlank: true,
		                allowNegative: true,
		                allowDecimals: true,
		                decimalPrecision:3
		            },
					{
						xtype : 'combo',
						id: 'status',
						listConfig : {
							emptyText : '<%= t('no match value') %>', 
							maxHeight : 60 
						},
						name:'status',
						autoSelect : true,
						fieldLabel:'<%= t('status') %>',
						triggerAction: 'all',
						store : BasestationStore,
						displayField:'basestationstatus',
						valueField:'basestationstatus',
						queryMode: 'local',
						forceSelection : true,
						typeAhead : true,
						value:'<%= t(:working) %>'
					}    	              
				]
    		})  
			]
	    },{
	        title: '<%= t('mapnav') %>',
			id: 'mapcenter',
	        region: 'center',      
	        xtype: 'panel',
	        layout: 'fit',
			html:"<div style='width:100%;height:100%;border:1px solid gray' id='mapDiv'><h4>网络错误</h4></div>"
	    }],
	});
	var east=Ext.getCmp('east-panel');
	east.collapse();
	var show_map_in_panel=new Ext.panel.Panel({
		layout:'fit',
		items: [baidumap]
	})
	var work_space = Ext.getCmp('center');
	work_space.removeAll();
	work_space.add(show_map_in_panel);
	work_space.doLayout();

	var map = new BMap.Map("mapDiv"); 
	var point="杭州市"
	map.addControl(new BMap.NavigationControl());

	var bdary = new BMap.Boundary();
    bdary.get("杭州西湖区", function(rs){               
        var count = rs.boundaries.length; 
        for(var i = 0; i < count; i++){
            var ply = new BMap.Polygon(rs.boundaries[i], {strokeWeight: 2, strokeColor: "#ff0000", fillOpacity: 0.01,}); 
            map.addOverlay(ply);  
            map.setViewport(ply.getPath());            
        }                
    });   


	map.enableScrollWheelZoom();
	map.addEventListener("click",function(e){  
		console.log(e.point); 
		east.collapse();
	})
	var marker;
	var baseurl='http://'+document.URL.split('/')[2]+'/assets/';
	<% Basestation.all.each do |basestation| %>
		 
		var workingicon = new BMap.Icon( baseurl+'working.png', new BMap.Size(32, 37), { 
	    	anchor: new BMap.Size(0, 0) 
		}); 
		var breakingicon = new BMap.Icon( baseurl+'breaking.png', new BMap.Size(32, 37), { 
	    	anchor: new BMap.Size(0, 0) 
		}); 
		var marker = new BMap.Marker(new BMap.Point(<%= basestation.longitude %>, <%= basestation.latitude %>), {
			<% if basestation.status %>
			icon: workingicon,
			<% else %>
			icon: breakingicon,
			<% end %>
			title: '<%= basestation.name %>'
		});
		map.addOverlay(marker); 
		marker.addEventListener("click", function(e){  
			east.expand();			
			Ext.getCmp('zoneid').setValue('<%= basestation.try(:id) %>');	
			Ext.getCmp('code').setValue('<%= basestation.try(:code) %>');	
			Ext.getCmp('ip').setValue('<%= basestation.try(:ip) %>');	
			Ext.getCmp('txtZoneName').setValue('<%= basestation.try(:name) %>');
			Ext.getCmp('place').setValue('<%= basestation.try(:place) %>');	
			Ext.getCmp('status').setValue('<%= basestation.try(:status) ? t(:working) : t(:breaking)  %>');			
			Ext.getCmp('txtPosX').setValue(<%= basestation.try(:latitude) %>);
			Ext.getCmp('txtPosY').setValue(<%= basestation.try(:longitude) %>);
		});
		markersArray.push(marker);
	<% end %>   

	 
})
</script>
/*
// 	marker = new BMap.Marker(new BMap.Point(longitude, latitude ));
//  console.log(e.point);  
//    	map.clearOverlays();  
	//map.centerAndZoom(point,15);                     
	//map.centerAndZoom(myCity.get(myFun), 15);


			Ext.getCmp('txtPosX').setValue(e.point.lng);
			Ext.getCmp('txtPosY').setValue(e.point.lat);
	function myFun(result){
	    var cityName = result.name;
	    map.setCenter(cityName);
	    alert(cityName);
	}
	var myCity = new BMap.LocalCity();
	myCity.get(myFun);
*/
/*
	//map.addControl(new BMap.MapTypeControl);
	//map.addControl(new BMap.MapTypeControl({mapTypes: [BMAP_NORMAL_MAP,BMAP_HYBRID_MAP]}));
	//map.addControl(new BMap.ScaleControl);
	//map.addControl(new BMap.OverviewMapControl);

	function ZoomControl(){  
	 	this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;  
	 	this.defaultOffset = new BMap.Size(0, 0);  
	}  
	ZoomControl.prototype = new BMap.Control(); 
	ZoomControl.prototype.initialize = function(map){  
		var div = document.createElement("div");  
		div.appendChild(document.createTextNode(""));  
		div.style.cursor = "pointer";  
		div.style.border = "1px solid gray";  
		div.style.backgroundColor = "white"; 
		// div.onclick = function(e){  
		//   map.zoomTo(map.getZoom() + 2);  
		// }  
		map.getContainer().appendChild(div);  
		return div;  
	}  
	var myZoomCtrl = new ZoomControl();  

	map.addControl(myZoomCtrl);
*/
/*
map.addEventListener("click",function(e){  
	var flag=false;
	<% Basestation.all.each do |basestation| %>
	if((e.point.lng!=<%= basestation.longitude %>) || ( e.point.lat!=<%= basestation.latitude %>))
	{
	  	flag=true  
	}
	<% end %>
	if(flag==true){
	//	alert(e.point.lng + "," + e.point.lat); 
        // map.removeControl(myZoomCtrl);
	function Append(){   
	 	this.defaultAnchor = BMAP_ANCHOR_TOP_RIGHT;  
	 	this.defaultOffset = new BMap.Size(0, 0);  
	}  
	Append.prototype = new BMap.Control(); 
	Append.prototype.initialize = function(map){  
		var div = document.createElement("div");  
 		div.className = "message";
 		div.style.cursor = "pointer";  
 		div.style.border = "1px solid gray";  
 		div.style.backgroundColor = "white"; 
 		map.getContainer().appendChild(div);
		var str= e.point.lng + "," + e.point.lat;
		$( ".message" ).html(str);
 		return div;  
	}  
	var myAppend = new Append(); 
	map.addControl(myAppend);
	}
}); 

var marker1;
<% Basestation.all.each do |basestation| %>
 	marker1 = new BMap.Marker(new BMap.Point(<%= basestation.longitude %>, <%= basestation.latitude %>)); 
	map.addOverlay(marker1);  
// 	marker1.setAnimation(BMAP_ANIMATION_BOUNCE); 
	var opts = {  
 		width : 250,     
 		height: 100,      
 		title : "基站信息",  
    	enableMessage: false,
    	enableAutoPan: true
		}  
	var infoWindow = new BMap.InfoWindow('经度'+'<%= basestation.longitude %>'+'纬度'+'<%= basestation.latitude %>', opts);   
	marker1.addEventListener("click", function(){this.openInfoWindow(infoWindow);});
<% end %>
*/



/*
	var points = new BMap.Point(116.404, 39.915);
	var marker = new BMap.Marker(points);
	var infoWindow = new BMap.InfoWindow(sContent);   
	map.addOverlay(marker);
	marker.addEventListener("click", function(){          
	   this.openInfoWindow(infoWindow);
	   document.getElementById('imgDemo').onload = function (){
	       infoWindow.redraw();    
	   }
	});
*/

/*
	var marker = new BMap.Marker(point);  
    map.addOverlay(marker);  
    marker.addEventListener("click",function(){ //点击标注时出发事件  
        alert("您点击了标注");  
    });  
    marker.enableDragging();    //标注可拖拽  
        
    //创建信息窗口  
    var opts = {    
        width : 250,     // 信息窗口宽度    
        height: 100,     // 信息窗口高度    
        title : "Hello"  // 信息窗口标题    
    }    
    var infoWindow = new BMap.InfoWindow("World", opts);  // 创建信息窗口对象    
    map.openInfoWindow(infoWindow, map.getCenter());      // 打开信息窗口   
        
    //折线  

    var polyline = new BMap.Polyline([    
	    new BMap.Point(116.399, 39.910),    
	    new BMap.Point(116.405, 39.920),  
	    new BMap.Point(117.321,40.321)    
	        ],    
	{strokeColor:"blue", strokeWeight:6, strokeOpacity:0.5}  //蓝色、宽度为6  
    );    
    map.addOverlay(polyline);  
*/  
/*                        
	var map = new BMap.Map("real_bmap");// 创建Map实例
	var aa="金华"
	map.centerAndZoom(aa);
	map.addControl(new BMap.NavigationControl());
	map.enableScrollWheelZoom();		
*/
