Ext.onReady(function() {

Ext.Ajax.defaultHeaders = { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') };
itemsPerPage = 20;  

var classstore = Ext.create('Ext.data.Store', {
	autoLoad: false,
    fields:['id','classname','count','gradename','time'],
    pageSize: itemsPerPage, 
    proxy: {
        type: 'ajax',
        url: 'classgrid.json',  
       	extraParams : {
			teacher_id : <%= current_user.id %>
        },
        reader: {
            type: 'json',
            root: 'gridData',
            totalProperty: 'totalCount'
        }
    }  
});

classstore.load({
    params:{
        start:0,
        limit: itemsPerPage,
    }
});
function classdata_action_handler(type)
{
	
      	var form = new Ext.form.Panel({
	        width: 300,
	        frame: true,
	        title: '<%= t('add class') %>',
	        bodyPadding: '10 10 0',
	        height: 300,
	        defaults: {
	            anchor: '100%',
	            allowBlank: false,
	            msgTarget: 'side',
	            labelWidth: 80
	        },
	        items: [
        		{xtype:"hidden",name: "id"}, 
				{xtype:"textfield",fieldLabel: '<%= t('gradename') %>',name: "gradename"},   
				{xtype:"textfield",fieldLabel: '<%= t('classname') %>',name: "classname"},  
				{xtype:"textfield",fieldLabel: '<%= t('count') %>',name: "count"},      
        	],
	        buttonAlign:"center",
	        buttons: [
	            {
	            text: '<%= t(:save) %>',
	            handler: function(){
	               	var form = this.up('form').getForm();
	                if(form.isValid()){
	                    form.submit({
	                        url: 'teacher/add_class.json',
	                        waitMsg: '<%= t('on upload') %>',
	                        success: function(fp, o) {			
		                       	form.reset(),										                 								edit_window.close()
                        	}
                    	});
                	}
            	}
        		},{
		            text: '<%= t(:reset) %>',
		            handler: function() {
		                this.up('form').getForm().reset();
		            }
		        }
        	]
        });
	    var edit_window = new Ext.Window({
	        width:300,
	        height:180,
	        resizable:false,
	        layout:"fit",
	        closeAction:'close',
	        plain: true,
	        constrainHeader:true,
	        modal:true,
	        bodyStyle: 'padding:5px;',
	        items:[form]
	    });
		if(type=='edit')
		{
			var rows = classgrid.getSelectionModel().getSelection();
		    if(rows.length==1){
		        form.getForm().setValues({
		            id: rows[0].get("id")
		        });
		        edit_window.show();
	        }
	        else if(rows.length>1)
	        {
	        	 
	        }
	        else {
	        	 
	        } 
	 	}
		else if(type='add')
		{
			edit_window.show();
		}

}
var cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
        clicksToEdit: 1
    });
var classgrid=Ext.create('Ext.grid.Panel',{
	title : '<%= t('shclass manage') %>', 
	frame:true,
	viewConfig: {
		forceFit : true,
    		stripeRows: true
		},
	store:  classstore,  
	columns: [
    	 {
            xtype: 'rownumberer',
            width: 60,
            sortable: false,
            header: '<%= t('list') %>', 
            align: 'center'
        },
        {
			header: '<%= t('id') %>', 
			flex: 1, 
			dataIndex: 'id', 
			sortable: true, 
			align: 'center', 
			hidden: true
		},
		{
			header: '<%= t('gradename') %>', 
			flex: 1, 
			dataIndex: 'gradename', 
			sortable: true, 
			align: 'center',
		},
		{
			header: '<%= t('classname') %>', 
			flex: 1, 
			dataIndex: 'classname', 
			sortable: true, 
			align: 'center',
		},{
            header: 'time',
            dataIndex: 'time',
            width: 130,
            editor: new Ext.form.field.ComboBox({
                typeAhead: true,
                triggerAction: 'all',
                selectOnTab: true,
                store: [
                    ['pass week','pass week'],
                    ['pass month','pass month'],
                    ['pass all','pass all']
                ],
                lazyRender: true,
            })
        },
//		 { text: 'External Link', xtype: 'templatecolumn', dataIndex: 'time',tpl: '<a href="#" class="topopups">{time}</a>'},
		{
    		text: '<%= t('view cal') %>',
	      	xtype: 'actioncolumn', 
			iconCls: 'download',
			align: 'center',
			items: [{  
	   			icon: 'download.png',
				tooltip: '<%= t('view stationlog') %>',
				handler: function(grid, rowIndex, colIndex) {
					var rec = grid.getStore().getAt(rowIndex);
	          		var models = grid.getStore().getRange();
	             	var record=models[rowIndex]; 
					console.log(rec.get('id'));
					Ext.Ajax.request({   
       					url:'classcalgraph.js',
       					params:{
        					id:rec.get('id'),
							time: rec.get('time')
        				},
        				success: function(resp,opts) {
                             console.log(resp.responseText)
						 	eval(resp.responseText)
                     	},
                     	failure: function(resp,opts) {
					
                      	}  
      
       				});
				}
			}]
		}, 
		{
			header: '<%= t('classstudentcount') %>', 
			flex: 1, 
			dataIndex: 'count', 
			sortable: true, 
			align: 'center',
		}
	],
	plugins: [cellEditing],
	dockedItems: [{
	    xtype: 'pagingtoolbar',
	    store: classstore,    
	    dock: 'bottom',
	    displayInfo: true,
		items:[
        '-',
		{ 
			text: '<%= t(:add) %>', 
			iconCls:"add", 
			handler: function() {
        		classdata_action_handler("add")
		}},
		{ 
			text: '<%= t(:edit) %>', 
			iconCls:"edit", 
			handler: function() {
        		classdata_action_handler("edit")
		}},
		{ 
			text: '<%= t(:delete) %>', 
			iconCls:"delete", 
			handler: function() {
        		classdata_action_handler("delete")
		}},
        {
	    	xtype: 'textfield',
	    	hideLabel: true,
	    	width: 70,
	    	id: "keyname",

		}, 
			{ 
			text: '<%= t(:search) %>',
			id:"search_record_button", 
			iconCls:"search", 
			handler:function(){
				record_search("search")
			} 
		},
    		{ 
			text: '<%= t(:clear) %>', 
			id:"clear_record_button", 
			disabled:true, 
			handler: function(){
				record_search("clear")
			} 
		}
    ]             
	}],
	listeners: {
  	itemdblclick: function(dataview, index, item, e) {
		var title=index.data['classname'];
		var studentstore = Ext.create('Ext.data.Store', {
	    autoLoad: false,
	    fields:['id','realname','studentid','height','weight','sex'],
	    pageSize: itemsPerPage,  
	    proxy: {
	        type: 'ajax',
	        url: 'studentgrid.json',  
	        reader: {
	            type: 'json',
	            root: 'gridData',
	            totalProperty: 'totalCount'
	        },
     		extraParams : {
             	shclass_id: index.data['id']
          	}
		}  
		});

		studentstore.load({
		    params:{
		        start:0,
		        limit: itemsPerPage,
		    }
		});
                   
		var studentgrid=Ext.create('Ext.grid.Panel',{
			title : title,
			frame:true,
			viewConfig: {
				forceFit : true,
            	stripeRows: true
        	},
			store: studentstore,
			columns: [
		 		{
            		xtype: 'rownumberer',
                	width: 60,
                	sortable: false,
                	header: '<%= t('list') %>', 
                	align: 'center'
				},
             	{
					header: '<%= t('id') %>', 
					flex: 1, 
					dataIndex: 'id', 
					sortable: true, 
					align: 'center', 
					hidden: true
				},
				{
					header: '<%= t('studentid') %>', 
					flex: 1, 
					dataIndex: 'studentid', 
					sortable: true, 
					align: 'center',
				},
					{
					header: '<%= t('sex') %>', 
					flex: 1, 
					dataIndex: 'sex', 
					sortable: true, 
					align: 'center',
					renderer: function (value, meta, record) {
						if(value=='male')
	                    return '<%= t(:male) %>'
						else
						return '<%= t(:female) %>'
	                }
				},
                {
					header: '<%= t('realname') %>', 
					flex: 1, 
					dataIndex: 'realname', 
					sortable: true, 
					align: 'center',
				},
				{
					header: '<%= t('height') %>', 
					flex: 1, 
					dataIndex: 'height', 
					sortable: true, 
					align: 'center',
				},
                {
					header: '<%= t('weight') %>', 
					flex: 1, 
					dataIndex: 'weight', 
					sortable: true, 
					align: 'center',
				}
				],
           		dockedItems: [{
	        		xtype: 'pagingtoolbar',
	        		store: studentstore,   
	        		dock: 'bottom',
	        		displayInfo: true,      
	          	}],
           		listeners: {
		  			itemdblclick: function(dataview, index, item, e) {
                    	var title=index.data['realname'];
                    		var exercisestore = Ext.create('Ext.data.Store', {
			    			autoLoad: false,
			    		//	fields:['id','distance','calorie','motiontime','step'],
							fields:['_id','light','sedentary','moderate','high','vigorous','motiontime','user_type', 'user_id'],
			    			pageSize: itemsPerPage, // items per page
						    proxy: {
						        type: 'ajax',
						        url: 'motiongrid.json',  
						        reader: {
						            type: 'json',
						            root: 'gridData',
						            totalProperty: 'totalCount'
						        },
                            	extraParams : {
		                     		user_id: index.data['id']
		                   		}
			    			}  
						});

						exercisestore.load({
			    			params:{
			        			start:0,
			        			limit: itemsPerPage,
			    			}
						});
                        var exercisegrid=Ext.create('Ext.grid.Panel',{
							title : title,
							frame:true,
							viewConfig: {
								forceFit : true,
	            				stripeRows: true
	        				},
							store: exercisestore,
							columns: [
			 				 {
					            xtype: 'rownumberer',
					            width: 60,
					            sortable: false,
					            header: '<%= t(:list) %>', 
					            align: 'center'
					        },
							{
								header: 'id', 
								flex: 1, 
								dataIndex: '_id', 
								sortable: true, 
								align: 'center', 
								hidden: true
							},
							{
								header: '<%= t(:motiontime) %>', 
								flex: 1, 
								dataIndex: 'motiontime', 
								sortable: true, 
								align: 'center',   
								renderer: function (value, meta, record) {
									return value.split('+')[0].replace(/T/g,' ');
								}
							},
							{
								header: '<%= t(:sedentary) %>', 
								flex: 1, 
								dataIndex: 'sedentary', 
								sortable: true, 
								align: 'center',
							},
							{
								header: '<%= t(:light) %>', 
								flex: 1, 
								dataIndex: 'light', 
								sortable: true, 
								align: 'center',
							},
							{
								header: '<%= t(:moderate) %>', 
								flex: 1, 
								dataIndex: 'moderate', 
								sortable: true, 
								align: 'center',
							},
							{
								header: '<%= t(:high) %>', 
								flex: 1, 
								dataIndex: 'high', 
								sortable: true, 
								align: 'center',
							},
							{
								header: '<%= t(:vigorous) %>', 
								flex: 1, 
								dataIndex: 'vigorous', 
								sortable: true, 
								align: 'center',
							}
							],
                    		dockedItems: [{
						        xtype: 'pagingtoolbar',
						        store: exercisestore,   
						        dock: 'bottom',
						        displayInfo: true,      
	          				}],
                  		});
                    	var tabPage = tabpanel.add({ 
							title: title,
							closable : true,
                        	items : [exercisegrid],
                        	layout: 'fit'
						})
						tabpanel.setActiveTab(tabPage); 
				}}      // end listen exercisegrid
		}); // end studentgrid
        var tabPage = tabpanel.add({ 
			title: title,
			closable : true,
            items : [studentgrid],
            layout: 'fit'
		})
		tabpanel.setActiveTab(tabPage); 
	}} // end listen classgrid
}); // end classgrid
var tabpanel=Ext.create('Ext.tab.Panel', {
    width: 400,
    height: 400,
    items: [classgrid]
});

var work_space = Ext.getCmp('center');
work_space.removeAll();
work_space.add(tabpanel);
work_space.doLayout();
})
